import sqlite3
import os
import csv
import random
from datetime import datetime, timedelta

# ──────────────── Setup: Simulate and Store Telematics Data ──────────────── #
def create_sample_db():
    conn = sqlite3.connect("telematics.db")
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS trips (
            id INTEGER PRIMARY KEY,
            vehicle_id TEXT,
            route_id TEXT,
            date TEXT,
            distance_km REAL,
            fuel_used_liters REAL,
            avg_speed_kph REAL
        )
    ''')

    # Simulate 10 vehicles × 3 routes × 5 trips
    for _ in range(150):
        vehicle_id = f"VH-{random.randint(100,199)}"
        route_id = f"R{random.randint(1,3)}"
        date = datetime.now() - timedelta(days=random.randint(0, 30))
        distance = round(random.uniform(20, 120), 2)
        fuel_used = round(distance / random.uniform(8, 14), 2)
        speed = round(random.uniform(40, 90), 1)
        c.execute('''
            INSERT INTO trips (vehicle_id, route_id, date, distance_km, fuel_used_liters, avg_speed_kph)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (vehicle_id, route_id, date.strftime('%Y-%m-%d'), distance, fuel_used, speed))

    conn.commit()
    conn.close()

# ──────────────── Analysis & Export ──────────────── #
def analyze_and_export():
    conn = sqlite3.connect("telematics.db")
    c = conn.cursor()

    c.execute('''
        SELECT 
            route_id,
            COUNT(*) AS total_trips,
            ROUND(AVG(distance_km), 2) AS avg_distance,
            ROUND(AVG(fuel_used_liters), 2) AS avg_fuel_used,
            ROUND(AVG(distance_km / fuel_used_liters), 2) AS avg_fuel_efficiency_kmpl,
            ROUND(AVG(avg_speed_kph), 1) AS avg_speed
        FROM trips
        GROUP BY route_id
    ''')

    rows = c.fetchall()

    with open("route_efficiency_report.csv", "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow([
            "Route ID", "Total Trips", "Avg Distance (km)",
            "Avg Fuel Used (L)", "Avg Fuel Efficiency (km/L)", "Avg Speed (km/h)"
        ])
        writer.writerows(rows)

    conn.close()
    csv_path = os.path.abspath("route_efficiency_report.csv")
    print(f"✅ Analysis complete. CSV saved at: {csv_path}")
    
# ──────────────── Run ──────────────── #
if __name__ == "__main__":
    create_sample_db()
    analyze_and_export()
